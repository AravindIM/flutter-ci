stages:
- test
- version
- build
- package
- release


flutter-analyze:
  stage: test
  environment: test
  image: ghcr.io/cirruslabs/flutter:stable
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: on_success
  before_script:
    - flutter pub get
  script:
    - flutter analyze


code-quality:
  stage: test
  environment: test
  image: ghcr.io/cirruslabs/flutter:stable
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: on_success
  before_script:
    - flutter pub global activate dart_code_metrics
    - export PATH="$PATH:$HOME/.pub-cache/bin"
  script:
    - metrics lib -r codeclimate  > gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json


flutter-test:
  stage: test
  environment: test
  image: ghcr.io/cirruslabs/flutter:stable
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: on_success
  before_script:
    - flutter pub global activate junitreport
    - export PATH="$PATH:$HOME/.pub-cache/bin"
  script:
    - flutter test --machine --coverage | tojunit -o report.xml
    - lcov --summary coverage/lcov.info
    - genhtml coverage/lcov.info --output=coverage
  coverage: '/lines\.*: \d+\.\d+\%/'
  artifacts:
    name: coverage
    paths:
      - $CI_PROJECT_DIR/coverage
    reports:
      junit: report.xml


bump-version:
  stage: version
  environment: release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    INITIAL_VERSION: '0.0.1'
    GIT_STRATEGY: clone
    GIT_DEPTH: "0"
    GIT_CHECKOUT: "true"
  script:
    - |
      apk add git
      apk add curl
      if [ -z "$(git tag)" ]; then
        RELEASE_VERSION="0.0.1"
      else
        # Extract version triplet from previous tag
        LATEST_TAG=$(git describe --tags --abbrev=0 | sed 's/^v//')
        MAJOR=$(echo "$LATEST_TAG" | awk -F '.' '{print $1}')
        MINOR=$(echo "$LATEST_TAG" | awk -F '.' '{print $2}')
        PATCH=$(echo "$LATEST_TAG" | awk -F '.' '{print $3}')

        # Get merge request for current commit hash
        MERGE_REQUEST=$(curl --header "JOB-TOKEN: $CI_JOB_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/repository/commits/${CI_COMMIT_SHA}/merge_requests")
        
        # Parse json for first (0th) merge request related to commit for labels and output 1 on finding the label
        BUMP_MAJOR=$(echo $MERGE_REQUEST | jq '.[0].labels | any(index("bump-major"))')
        BUMP_MINOR=$(echo $MERGE_REQUEST | jq '.[0].labels | any(index("bump-minor"))')

        if [ "$BUMP_MAJOR" = "true" ]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [ "BUMP_MINOR" = "true" ]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi
        
        # Combine version triplets
        RELEASE_VERSION="${MAJOR}.${MINOR}.${PATCH}"
      fi
      echo "Versioning Completed...!"
      echo "RELEASE_VERSION=${RELEASE_VERSION}"
      echo "RELEASE_VERSION=${RELEASE_VERSION}" >> release.env
  artifacts:
    untracked: false
    when: on_success
    expire_in: "30 days"
    reports:
      dotenv: release.env

build-apk:
  stage: build
  environment: release
  image: ghcr.io/cirruslabs/flutter:stable
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - flutter pub get
  script:
    - flutter build apk --split-per-abi --release
  artifacts:
    untracked: false
    when: on_success
    paths:
      - ./build/app/outputs/flutter-apk/*.apk
    expire_in: "30 days"


publish-package:
  stage: package
  environment: release
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  dependencies:
    - build-apk
    - bump-version
  script:
    - apk_paths=$(ls ./build/app/outputs/flutter-apk/*.apk)
    - |
      for apk_path in $apk_paths
      do
        apk_filename=$(basename $apk_path)
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $apk_path "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${RELEASE_VERSION}/${apk_filename}"
      done

release-apk:
  stage: release
  environment: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  dependencies:
    - build-apk
    - bump-version
  script:
    - echo "Creating release for ${CI_PROJECT_TITLE} v${RELEASE_VERSION}"
    - |
      args=""
      for apk_path in ./build/app/outputs/flutter-apk/*.apk
      do
        apk_filename=$(basename "$apk_path")
        args="${args}"' --assets-link '"'{\"name\":\"${apk_filename}\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${RELEASE_VERSION}/${apk_filename}\"}'"
      done
      echo "${args}" | xargs release-cli create --name "${CI_PROJECT_TITLE} v${RELEASE_VERSION}" --tag-name "v${RELEASE_VERSION}"
