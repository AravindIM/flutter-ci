stages:
- test
- build
- package
- release


flutter-analyze:
  stage: test
  environment: test
  image: ghcr.io/cirruslabs/flutter:stable
  before_script:
  - flutter pub get
  script:
    - flutter analyze


flutter-test:
  stage: test
  environment: test
  image: ghcr.io/cirruslabs/flutter:stable
  before_script:
  - flutter pub get
  script:
    - flutter test


build-apk:
  stage: build
  image: ghcr.io/cirruslabs/flutter:stable
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  before_script:
  - flutter pub get
  script:
    - flutter build apk --split-per-abi --release
  artifacts:
    untracked: false
    when: on_success
    paths:
      - ./build/app/outputs/flutter-apk/*.apk


publish-package:
  stage: package
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  script:
    - apk_paths=$(ls ./build/app/outputs/flutter-apk/*.apk)
    - |
      for apk_path in $apk_paths
      do
        apk_filename=$(basename $apk_path)
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $apk_path "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/0.${CI_PIPELINE_IID}/$apk_filename"
      done

release-apk:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - build-apk
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  script:
    - echo "running release_job for $TAG"
    - |
      args=""
      for apk_path in ./build/app/outputs/flutter-apk/*.apk
      do
        apk_filename=$(basename "$apk_path")
        args="$args"' --assets-link '"'{\"name\":\"${apk_filename}\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/0.${CI_PIPELINE_IID}/${apk_filename}\"}'"
      done
      echo "$args" | xargs -I {} release-cli create --name "Release v0.$CI_PIPELINE_IID" --tag-name "v0.$CI_PIPELINE_IID" {}



